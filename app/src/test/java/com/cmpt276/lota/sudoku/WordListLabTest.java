package com.cmpt276.lota.sudoku;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.Assert.*;

public class WordListLabTest {
    private WordListLab testWordListLab1;
    private WordListLab testWordListLab2;

    private ListsOfWords testListOfWords1;
    //private ListsOfWords testListOfWords2;
    private List<Words> testList = new ArrayList<>();//Creating arrayList

    private Words test1;
    private Words test2;

    String[][] arr = new String[1][3];


    @Before
    public void setUp() throws Exception
    {
        testWordListLab1 = new WordListLab();
        testWordListLab2 = new WordListLab();
        test1 = new Words("dummy1", "dummy3");
        test2 = new Words("dummy2", "dummy4");
        testList.add(test1);
        testList.add(test2);
        testListOfWords1 = new ListsOfWords(testList, "testname1");

        for (int i = 0; i < 3; i++)
        {
            arr[0][i] = "testString";
        }

    }

    @Test
    public void get()
    {
        //assertEquals(test,test.getWordListLab());
    }


    @Test
    public void addListsOfWords() {
        testWordListLab1.addListsOfWords(testListOfWords1);
        testWordListLab2.addListsOfWords(testListOfWords1);
        assertEquals(testWordListLab1,testWordListLab2);
    }

    @Test
    public void setId()
    {
        UUID testID = UUID.randomUUID();
        testWordListLab1.setId(testID);
        //assertEquals(testID,testListOfWords1.getId());
        assertEquals(1,testWordListLab1.getHasSetId());

    }

    @Test
    public void getId()
    {
        UUID id1 = testListOfWords1.getId();
        UUID id2 = testListOfWords1.getId();
        assertEquals(id1,id2);

        //not a good way since the id is generated by the library function
    }

    @Test
    public void getNotFamiliarWord()
    {
        //since in the setup function we set the NotFamiliarWord with our
        //pre-defined array
        testWordListLab1.setNotFamiliarWord(arr);
        //right now we just directly compare with this two array
        Assert.assertArrayEquals(arr, testWordListLab1.getNotFamiliarWord());
    }


    @Test
    public void getHasSetId()
    {
        //since in the initialization the default value is -1
        //so the getHasSetID should return -1;
        assertEquals(-1,testWordListLab1.getHasSetId());
    }

    @Test
    public void getHasSetFamiliar()
    {
        //since in the initialization the default value is -1
        //so the getHasSetFamiliar should return -1;
        assertEquals(-1,testWordListLab1.getHasSetFamiliar());
    }
}