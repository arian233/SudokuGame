package com.cmpt276.lota.sudoku;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class PuzzleGeneratorTest {

    private PuzzleGenerator testPuzzleGenerator;  //declare  a class member to test
    private  CheckResult testCheckResult;
    private  Language testPuzzle[][];
    private  Language testConflict[][];
    private  int testConflictPuzzle[][];

    @Before
    public void setUp() throws Exception {

        testPuzzleGenerator = new PuzzleGenerator();
        testCheckResult = new CheckResult();
        testConflictPuzzle =  new int[9][9];
    }


    @Test
    public void generateGrid()
    {
        // since we already test the correctness of the class checkResult
        // so we can directly use the checkResult class to get test the correctness of our Generator
        // we firstly using the generateGrid to generate a puzzle and then let the CheckResult to test
        testPuzzle = testPuzzleGenerator.generateGrid();

//        for (int i = 0; i < 9; i++)
//        {
//            for (int j = 0; j < 9 ; j++)
//            {
//
//                System.out.print(" " + testPuzzle[i][j].getNumber() + " ");
//            }
//            System.out.println("\n");
//        }
        //after the generator generates a puzzle, then we just use the checkResult function to check
        assertEquals(true, testCheckResult.checkResult(testPuzzle));

        //since this puzzle generator return correct result so it should pass the test

    }

    @Test
    public void getConflict()
    {
        // getConflict's input is an int array
        // so we need to casted it int

        testConflict = testPuzzleGenerator.generateGrid(); //generated a puzzle
        for (int i = 0; i < 9 ; i++) //casted to a int 2-d array
        {
            for (int j = 0; j <9 ; j++)
            {
                testConflictPuzzle[i][j] = testConflict[i][j].getNumber();
            }
        }


        assertEquals(false,testPuzzleGenerator.getConflict(testConflictPuzzle));
        //since the puzzle generated by the generator is correct, there is no conflict so it
        //return false which expected


        //right now we randomly change a cell then this puzzle will become a invalid puzzle
        int temp = testConflictPuzzle[2][2];
        testConflictPuzzle[2][2] = testConflictPuzzle[2][3];
        //gonna crate a conflict

        assertEquals(true,testPuzzleGenerator.getConflict(testConflictPuzzle));
        //expected return true which represents a conflict

        //change it back
        testConflictPuzzle[2][2] = temp;
        assertEquals(false,testPuzzleGenerator.getConflict(testConflictPuzzle));


    }
//
//    @Test
//    public void getLanOne()
//    {
//        String test1String[];
//        String test2String[];
        //since each time the Lan one gonna return different output and it does not provided a getter
        //we can not test it
        //Use two string to compare teach time if it is the same

//        test1String = testPuzzleGenerator.getLanOne();
//        test2String = testPuzzleGenerator.getLanOne();
//        for (int j = 0; j < 9 ; j++)
//        {
//
//                System.out.print(" " + test1String[j] + " ");
//        }
//
//        System.out.print("\n");
//
//
//        for (int j = 0; j < 9 ; j++)
//        {
//
//            System.out.print(" " + test2String[j] + " ");
//
//        }

        //two output is the same

        //test in this way
        //assertEquals(test1String,testPuzzleGenerator.getLanOne());
        //assertEquals(true,test1String.equals(testPuzzleGenerator.getLanOne()));

//    }


}